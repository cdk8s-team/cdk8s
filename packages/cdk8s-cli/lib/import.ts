import * as https from 'https';
import { promises } from 'fs';
import { emitConstructForApiObject, findApiObjectDefinitions, selectApiObjects } from '../lib/codegen-constructs';
import { CodeMaker } from 'codemaker';
import { JSONSchema4 } from 'json-schema';
import { TypeGenerator } from './codegen-types';

export const DEFAULT_API_VERSION = '1.14.0';

export interface Options {
  /**
   * The API version to generate.
   */
  readonly apiVersion?: string;

  /**
   * FQNs of API object types to select instead of selecting the latest stable
   * version.
   * 
   * @default - selects the latest stable version from each API object
   */
  readonly include?: string[];

  /**
   * Do not import these types. Instead, represent them as "any".
   * 
   * @default - include all types that derive from the root types.
   */
  readonly exclude?: string[];
}

export async function generateAllApiObjects(outdir: string, options: Options) {
  const code = new CodeMaker();
  code.indentation = 2;

  const schema = await downloadSchema(options.apiVersion ?? DEFAULT_API_VERSION);
  const map = findApiObjectDefinitions(schema);

  const topLevelObjects = selectApiObjects(map, { include: options.include });

  code.openFile('index.ts');
  code.line(`// generated by cdk8s`);
  code.line(`import { ApiObject } from 'cdk8s';`);
  code.line(`import { Construct } from '@aws-cdk/core';`);
  code.line();

  const typeGenerator = new TypeGenerator(schema, { exclude: options.exclude });

  for (const o of topLevelObjects) {
    emitConstructForApiObject(code, typeGenerator, o);
  }

  typeGenerator.generate(code);

  code.closeFile('index.ts');

  await promises.mkdir(outdir, { recursive: true });
  await code.save(outdir);  
}

async function downloadSchema(apiVersion: string) {
  const output = await httpsGet(`https://kubernetesjsonschema.dev/v${apiVersion}/_definitions.json`);
  return JSON.parse(output) as JSONSchema4;
}

async function httpsGet(url: string): Promise<string> {
  return new Promise((ok, ko) => {
    const req = https.get(url, res => {
      const data = new Array<Buffer>();
      res.on('data', chunk => data.push(chunk));
      res.once('end', () => ok(Buffer.concat(data).toString('utf-8')));
      res.once('error', ko);
    });

    req.once('error', ko);
    req.end();
  });
}
