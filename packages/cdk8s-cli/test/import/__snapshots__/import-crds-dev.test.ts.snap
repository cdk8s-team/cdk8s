// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`crds.dev import github:crossplane/crossplane@0.14.0 1`] = `
Object {
  "author": Object {
    "name": "generated@generated.com",
    "roles": Array [
      "author",
    ],
  },
  "dependencies": Object {
    "cdk8s": "999.999.999",
    "constructs": "3.2.34",
  },
  "dependencyClosure": Object {
    "cdk8s": Object {
      "targets": Object {
        "dotnet": Object {
          "namespace": "Org.Cdk8s",
          "packageId": "Org.Cdk8s",
        },
        "java": Object {
          "maven": Object {
            "artifactId": "cdk8s",
            "groupId": "org.cdk8s",
          },
          "package": "org.cdk8s",
        },
        "js": Object {
          "npm": "cdk8s",
        },
        "python": Object {
          "distName": "cdk8s",
          "module": "cdk8s",
        },
      },
    },
    "constructs": Object {
      "targets": Object {
        "dotnet": Object {
          "namespace": "Constructs",
          "packageId": "Constructs",
        },
        "java": Object {
          "maven": Object {
            "artifactId": "constructs",
            "groupId": "software.constructs",
          },
          "package": "software.constructs",
        },
        "js": Object {
          "npm": "constructs",
        },
        "python": Object {
          "distName": "constructs",
          "module": "constructs",
        },
      },
    },
  },
  "description": "apiextensionscrossplaneiocomposition",
  "fingerprint": "<fingerprint>",
  "homepage": "http://generated",
  "jsiiVersion": "1.13.0 (build 385c325)",
  "license": "Apache-2.0",
  "name": "apiextensionscrossplaneiocomposition",
  "repository": Object {
    "type": "git",
    "url": "http://generated",
  },
  "schema": "jsii/0.10.0",
  "targets": Object {
    "js": Object {
      "npm": "apiextensionscrossplaneiocomposition",
    },
  },
  "types": Object {
    "apiextensionscrossplaneiocomposition.Composition": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "base": "cdk8s.ApiObject",
      "docs": Object {
        "custom": Object {
          "schema": "Composition",
        },
        "summary": "Composition defines the group of resources to be created when a compatible type is created with reference to the composition.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.Composition",
      "initializer": Object {
        "docs": Object {
          "summary": "Defines a \\"Composition\\" API object.",
        },
        "locationInModule": Object {
          "filename": "apiextensions.crossplane.io/composition.ts",
          "line": 17,
        },
        "parameters": Array [
          Object {
            "docs": Object {
              "summary": "the scope in which to define this object.",
            },
            "name": "scope",
            "type": Object {
              "fqn": "constructs.Construct",
            },
          },
          Object {
            "docs": Object {
              "summary": "a scope-local name for the object.",
            },
            "name": "id",
            "type": Object {
              "primitive": "string",
            },
          },
          Object {
            "docs": Object {
              "summary": "initialiation props.",
            },
            "name": "props",
            "optional": true,
            "type": Object {
              "fqn": "apiextensionscrossplaneiocomposition.CompositionProps",
            },
          },
        ],
      },
      "kind": "class",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 10,
      },
      "name": "Composition",
    },
    "apiextensionscrossplaneiocomposition.CompositionProps": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "Composition",
        },
        "summary": "Composition defines the group of resources to be created when a compatible type is created with reference to the composition.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionProps",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 31,
      },
      "name": "CompositionProps",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "Composition#metadata",
            },
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 35,
          },
          "name": "metadata",
          "optional": true,
          "type": Object {
            "primitive": "any",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "Composition#spec",
            },
            "summary": "CompositionSpec specifies the desired state of the definition.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 42,
          },
          "name": "spec",
          "optional": true,
          "type": Object {
            "fqn": "apiextensionscrossplaneiocomposition.CompositionSpec",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpec": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpec",
        },
        "summary": "CompositionSpec specifies the desired state of the definition.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpec",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 51,
      },
      "name": "CompositionSpec",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpec#compositeTypeRef",
            },
            "summary": "CompositeTypeRef specifies the type of composite resource that this composition is compatible with.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 57,
          },
          "name": "compositeTypeRef",
          "type": Object {
            "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecCompositeTypeRef",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpec#resources",
            },
            "summary": "Resources is the list of resource templates that will be used when a composite resource referring to this composition is created.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 64,
          },
          "name": "resources",
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResources",
              },
              "kind": "array",
            },
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpec#writeConnectionSecretsToNamespace",
            },
            "summary": "WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 71,
          },
          "name": "writeConnectionSecretsToNamespace",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecCompositeTypeRef": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecCompositeTypeRef",
        },
        "summary": "CompositeTypeRef specifies the type of composite resource that this composition is compatible with.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecCompositeTypeRef",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 80,
      },
      "name": "CompositionSpecCompositeTypeRef",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecCompositeTypeRef#apiVersion",
            },
            "summary": "APIVersion of the type.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 86,
          },
          "name": "apiVersion",
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecCompositeTypeRef#kind",
            },
            "summary": "Kind of the type.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 93,
          },
          "name": "kind",
          "type": Object {
            "primitive": "string",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResources": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResources",
        },
        "summary": "ComposedTemplate is used to provide information about how the composed resource should be processed.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResources",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 102,
      },
      "name": "CompositionSpecResources",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResources#base",
            },
            "summary": "Base is the target resource that the patches will be applied on.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 108,
          },
          "name": "base",
          "type": Object {
            "primitive": "any",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResources#connectionDetails",
            },
            "summary": "ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 115,
          },
          "name": "connectionDetails",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesConnectionDetails",
              },
              "kind": "array",
            },
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResources#patches",
            },
            "summary": "Patches will be applied as overlay to the base resource.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 122,
          },
          "name": "patches",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatches",
              },
              "kind": "array",
            },
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResources#readinessChecks",
            },
            "remarks": "All checks have to return true in order for resource to be considered ready. The default readiness check is to have the \\"Ready\\" condition to be \\"True\\".",
            "summary": "ReadinessChecks allows users to define custom readiness checks.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 129,
          },
          "name": "readinessChecks",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecks",
              },
              "kind": "array",
            },
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesConnectionDetails": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesConnectionDetails",
        },
        "summary": "ConnectionDetail includes the information about the propagation of the connection information from one secret to another.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesConnectionDetails",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 138,
      },
      "name": "CompositionSpecResourcesConnectionDetails",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesConnectionDetails#fromConnectionSecretKey",
            },
            "summary": "FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 144,
          },
          "name": "fromConnectionSecretKey",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesConnectionDetails#name",
            },
            "remarks": "Leave empty if you'd like to use the same key name.",
            "summary": "Name of the connection secret key that will be propagated to the connection secret of the composition instance.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 151,
          },
          "name": "name",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesConnectionDetails#value",
            },
            "remarks": "Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.",
            "summary": "Value that will be propagated to the connection secret of the composition instance.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 158,
          },
          "name": "value",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatches": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesPatches",
        },
        "summary": "Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatches",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 167,
      },
      "name": "CompositionSpecResourcesPatches",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatches#fromFieldPath",
            },
            "summary": "FromFieldPath is the path of the field on the upstream resource whose value to be used as input.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 173,
          },
          "name": "fromFieldPath",
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatches#toFieldPath",
            },
            "remarks": "Leave empty if you'd like to propagate to the same path on the target resource.",
            "summary": "ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 180,
          },
          "name": "toFieldPath",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatches#transforms",
            },
            "summary": "Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 187,
          },
          "name": "transforms",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransforms",
              },
              "kind": "array",
            },
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransforms": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesPatchesTransforms",
        },
        "summary": "Transform is a unit of process whose input is transformed into an output with the supplied configuration.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransforms",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 232,
      },
      "name": "CompositionSpecResourcesPatchesTransforms",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransforms#type",
            },
            "summary": "Type of the transform to be run.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 259,
          },
          "name": "type",
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransforms#map",
            },
            "summary": "Map uses the input as a key in the given map and returns the value.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 238,
          },
          "name": "map",
          "optional": true,
          "type": Object {
            "collection": Object {
              "elementtype": Object {
                "primitive": "string",
              },
              "kind": "map",
            },
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransforms#math",
            },
            "summary": "Math is used to transform the input via mathematical operations such as multiplication.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 245,
          },
          "name": "math",
          "optional": true,
          "type": Object {
            "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsMath",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransforms#string",
            },
            "remarks": "Note that the input does not necessarily need to be a string.",
            "summary": "String is used to transform the input into a string or a different kind of string.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 252,
          },
          "name": "string",
          "optional": true,
          "type": Object {
            "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsString",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsMath": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesPatchesTransformsMath",
        },
        "summary": "Math is used to transform the input via mathematical operations such as multiplication.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsMath",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 284,
      },
      "name": "CompositionSpecResourcesPatchesTransformsMath",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransformsMath#multiply",
            },
            "summary": "Multiply the value.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 290,
          },
          "name": "multiply",
          "optional": true,
          "type": Object {
            "primitive": "number",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsString": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesPatchesTransformsString",
        },
        "remarks": "Note that the input does not necessarily need to be a string.",
        "summary": "String is used to transform the input into a string or a different kind of string.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesPatchesTransformsString",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 299,
      },
      "name": "CompositionSpecResourcesPatchesTransformsString",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesPatchesTransformsString#fmt",
            },
            "remarks": "See https://golang.org/pkg/fmt/ for details.",
            "summary": "Format the input using a Go format string.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 305,
          },
          "name": "fmt",
          "type": Object {
            "primitive": "string",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecks": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "datatype": true,
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesReadinessChecks",
        },
        "summary": "ReadinessCheck is used to indicate how to tell whether a resource is ready for consumption.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecks",
      "kind": "interface",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 196,
      },
      "name": "CompositionSpecResourcesReadinessChecks",
      "properties": Array [
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesReadinessChecks#type",
            },
            "summary": "Type indicates the type of probe you'd like to use.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 223,
          },
          "name": "type",
          "type": Object {
            "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecksType",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesReadinessChecks#fieldPath",
            },
            "summary": "FieldPath shows the path of the field whose value will be used.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 202,
          },
          "name": "fieldPath",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesReadinessChecks#matchInteger",
            },
            "summary": "MatchInt is the value you'd like to match if you're using \\"MatchInt\\" type.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 209,
          },
          "name": "matchInteger",
          "optional": true,
          "type": Object {
            "primitive": "number",
          },
        },
        Object {
          "abstract": true,
          "docs": Object {
            "custom": Object {
              "schema": "CompositionSpecResourcesReadinessChecks#matchString",
            },
            "summary": "MatchString is the value you'd like to match if you're using \\"MatchString\\" type.",
          },
          "immutable": true,
          "locationInModule": Object {
            "filename": "apiextensions.crossplane.io/composition.ts",
            "line": 216,
          },
          "name": "matchString",
          "optional": true,
          "type": Object {
            "primitive": "string",
          },
        },
      ],
    },
    "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecksType": Object {
      "assembly": "apiextensionscrossplaneiocomposition",
      "docs": Object {
        "custom": Object {
          "schema": "CompositionSpecResourcesReadinessChecksType",
        },
        "summary": "Type indicates the type of probe you'd like to use.",
      },
      "fqn": "apiextensionscrossplaneiocomposition.CompositionSpecResourcesReadinessChecksType",
      "kind": "enum",
      "locationInModule": Object {
        "filename": "apiextensions.crossplane.io/composition.ts",
        "line": 268,
      },
      "members": Array [
        Object {
          "docs": Object {
            "summary": "MatchString.",
          },
          "name": "MATCH_STRING",
        },
        Object {
          "docs": Object {
            "summary": "MatchInteger.",
          },
          "name": "MATCH_INTEGER",
        },
        Object {
          "docs": Object {
            "summary": "NonEmpty.",
          },
          "name": "NON_EMPTY",
        },
        Object {
          "docs": Object {
            "summary": "None.",
          },
          "name": "NONE",
        },
      ],
      "name": "CompositionSpecResourcesReadinessChecksType",
    },
  },
  "version": "0.0.0",
}
`;
