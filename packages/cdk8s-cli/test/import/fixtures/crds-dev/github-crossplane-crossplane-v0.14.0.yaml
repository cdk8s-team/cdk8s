apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: compositeresourcedefinitions.apiextensions.crossplane.io
spec:
  group: apiextensions.crossplane.io
  names:
    categories:
    - crossplane
    kind: CompositeResourceDefinition
    listKind: CompositeResourceDefinitionList
    plural: compositeresourcedefinitions
    shortNames:
    - xrd
    singular: compositeresourcedefinition
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Established')].status
      name: ESTABLISHED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Offered')].status
      name: OFFERED
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CompositeResourceDefinitionSpec specifies the desired state of the definition.
            properties:
              claimNames:
                description: ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
                properties:
                  categories:
                    description: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                    items:
                      type: string
                    type: array
                  kind:
                    description: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                    type: string
                  listKind:
                    description: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                    type: string
                  plural:
                    description: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                    type: string
                  shortNames:
                    description: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                    items:
                      type: string
                    type: array
                  singular:
                    description: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                    type: string
                required:
                - kind
                - plural
                type: object
              connectionSecretKeys:
                description: ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
                items:
                  type: string
                type: array
              defaultCompositionRef:
                description: DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              enforcedCompositionRef:
                description: EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              group:
                description: Group specifies the API group of the defined composite resource. Composite resources are served under `/apis/<group>/...`. Must match the name of the XRD (in the form `<names.plural>.<group>`).
                type: string
              names:
                description: Names specifies the resource and kind names of the defined composite resource.
                properties:
                  categories:
                    description: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                    items:
                      type: string
                    type: array
                  kind:
                    description: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                    type: string
                  listKind:
                    description: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                    type: string
                  plural:
                    description: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                    type: string
                  shortNames:
                    description: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                    items:
                      type: string
                    type: array
                  singular:
                    description: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                    type: string
                required:
                - kind
                - plural
                type: object
              versions:
                description: 'Versions is the list of all API versions of the defined composite resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. Note that all versions must have identical schemas; Crossplane does not currently support conversion between different version schemas.'
                items:
                  description: CompositeResourceDefinitionVersion describes a version of an XR.
                  properties:
                    additionalPrinterColumns:
                      description: 'AdditionalPrinterColumns specifies additional columns returned in Table output. If no columns are specified, a single column displaying the age of the custom resource is used. See the following link for details: https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables'
                      items:
                        description: CustomResourceColumnDefinition specifies a column for server side printing.
                        properties:
                          description:
                            description: description is a human readable description of this column.
                            type: string
                          format:
                            description: format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                            type: string
                          jsonPath:
                            description: jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
                            type: string
                          name:
                            description: name is a human readable name for the column.
                            type: string
                          priority:
                            description: priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
                            format: int32
                            type: integer
                          type:
                            description: type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                            type: string
                        required:
                        - jsonPath
                        - name
                        - type
                        type: object
                      type: array
                    name:
                      description: Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
                      type: string
                    referenceable:
                      description: Referenceable specifies that this version may be referenced by a Composition in order to configure which resources an XR may be composed of. Exactly one version must be marked as referenceable; all Compositions must target only the referenceable version. The referenceable version must be served.
                      type: boolean
                    schema:
                      description: Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
                      properties:
                        openAPIV3Schema:
                          description: OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                    served:
                      description: Served specifies that this version should be served via REST APIs.
                      type: boolean
                  required:
                  - name
                  - referenceable
                  - served
                  type: object
                type: array
            required:
            - group
            - names
            - versions
            type: object
          status:
            description: CompositeResourceDefinitionStatus shows the observed state of the definition.
            properties:
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
              controllers:
                description: Controllers represents the status of the controllers that power this composite resource definition.
                properties:
                  compositeResourceClaimType:
                    description: The CompositeResourceClaimTypeRef is the type of composite resource claim that Crossplane is currently reconciling for this definition. Its version will eventually become consistent with the definition's referenceable version. Note that clients may interact with any served type; this is simply the type that Crossplane interacts with.
                    properties:
                      apiVersion:
                        description: APIVersion of the type.
                        type: string
                      kind:
                        description: Kind of the type.
                        type: string
                    required:
                    - apiVersion
                    - kind
                    type: object
                  compositeResourceType:
                    description: The CompositeResourceTypeRef is the type of composite resource that Crossplane is currently reconciling for this definition. Its version will eventually become consistent with the definition's referenceable version. Note that clients may interact with any served type; this is simply the type that Crossplane interacts with.
                    properties:
                      apiVersion:
                        description: APIVersion of the type.
                        type: string
                      kind:
                        description: Kind of the type.
                        type: string
                    required:
                    - apiVersion
                    - kind
                    type: object
                type: object
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Established')].status
      name: ESTABLISHED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Offered')].status
      name: OFFERED
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: An CompositeResourceDefinition defines a new kind of composite infrastructure resource. The new resource is composed of other composite or managed infrastructure resources.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CompositeResourceDefinitionSpec specifies the desired state of the definition.
            properties:
              claimNames:
                description: ClaimNames specifies the names of an optional composite resource claim. When claim names are specified Crossplane will create a namespaced 'composite resource claim' CRD that corresponds to the defined composite resource. This composite resource claim acts as a namespaced proxy for the composite resource; creating, updating, or deleting the claim will create, update, or delete a corresponding composite resource. You may add claim names to an existing CompositeResourceDefinition, but they cannot be changed or removed once they have been set.
                properties:
                  categories:
                    description: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                    items:
                      type: string
                    type: array
                  kind:
                    description: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                    type: string
                  listKind:
                    description: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                    type: string
                  plural:
                    description: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                    type: string
                  shortNames:
                    description: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                    items:
                      type: string
                    type: array
                  singular:
                    description: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                    type: string
                required:
                - kind
                - plural
                type: object
              connectionSecretKeys:
                description: ConnectionSecretKeys is the list of keys that will be exposed to the end user of the defined kind.
                items:
                  type: string
                type: array
              defaultCompositionRef:
                description: DefaultCompositionRef refers to the Composition resource that will be used in case no composition selector is given.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              enforcedCompositionRef:
                description: EnforcedCompositionRef refers to the Composition resource that will be used by all composite instances whose schema is defined by this definition.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              group:
                description: Group specifies the API group of the defined composite resource. Composite resources are served under `/apis/<group>/...`. Must match the name of the XRD (in the form `<names.plural>.<group>`).
                type: string
              names:
                description: Names specifies the resource and kind names of the defined composite resource.
                properties:
                  categories:
                    description: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                    items:
                      type: string
                    type: array
                  kind:
                    description: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                    type: string
                  listKind:
                    description: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                    type: string
                  plural:
                    description: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                    type: string
                  shortNames:
                    description: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                    items:
                      type: string
                    type: array
                  singular:
                    description: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                    type: string
                required:
                - kind
                - plural
                type: object
              versions:
                description: 'Versions is the list of all API versions of the defined composite resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. Note that all versions must have identical schemas; Crossplane does not currently support conversion between different version schemas.'
                items:
                  description: CompositeResourceDefinitionVersion describes a version of an XR.
                  properties:
                    additionalPrinterColumns:
                      description: 'AdditionalPrinterColumns specifies additional columns returned in Table output. If no columns are specified, a single column displaying the age of the custom resource is used. See the following link for details: https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables'
                      items:
                        description: CustomResourceColumnDefinition specifies a column for server side printing.
                        properties:
                          description:
                            description: description is a human readable description of this column.
                            type: string
                          format:
                            description: format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                            type: string
                          jsonPath:
                            description: jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
                            type: string
                          name:
                            description: name is a human readable name for the column.
                            type: string
                          priority:
                            description: priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
                            format: int32
                            type: integer
                          type:
                            description: type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                            type: string
                        required:
                        - jsonPath
                        - name
                        - type
                        type: object
                      type: array
                    name:
                      description: Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
                      type: string
                    referenceable:
                      description: Referenceable specifies that this version may be referenced by a Composition in order to configure which resources an XR may be composed of. Exactly one version must be marked as referenceable; all Compositions must target only the referenceable version. The referenceable version must be served.
                      type: boolean
                    schema:
                      description: Schema describes the schema used for validation, pruning, and defaulting of this version of the defined composite resource. Fields required by all composite resources will be injected into this schema automatically, and will override equivalently named fields in this schema. Omitting this schema results in a schema that contains only the fields required by all composite resources.
                      properties:
                        openAPIV3Schema:
                          description: OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                    served:
                      description: Served specifies that this version should be served via REST APIs.
                      type: boolean
                  required:
                  - name
                  - referenceable
                  - served
                  type: object
                type: array
            required:
            - group
            - names
            - versions
            type: object
          status:
            description: CompositeResourceDefinitionStatus shows the observed state of the definition.
            properties:
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
              controllers:
                description: Controllers represents the status of the controllers that power this composite resource definition.
                properties:
                  compositeResourceClaimType:
                    description: The CompositeResourceClaimTypeRef is the type of composite resource claim that Crossplane is currently reconciling for this definition. Its version will eventually become consistent with the definition's referenceable version. Note that clients may interact with any served type; this is simply the type that Crossplane interacts with.
                    properties:
                      apiVersion:
                        description: APIVersion of the type.
                        type: string
                      kind:
                        description: Kind of the type.
                        type: string
                    required:
                    - apiVersion
                    - kind
                    type: object
                  compositeResourceType:
                    description: The CompositeResourceTypeRef is the type of composite resource that Crossplane is currently reconciling for this definition. Its version will eventually become consistent with the definition's referenceable version. Note that clients may interact with any served type; this is simply the type that Crossplane interacts with.
                    properties:
                      apiVersion:
                        description: APIVersion of the type.
                        type: string
                      kind:
                        description: Kind of the type.
                        type: string
                    required:
                    - apiVersion
                    - kind
                    type: object
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: compositions.apiextensions.crossplane.io
spec:
  group: apiextensions.crossplane.io
  names:
    categories:
    - crossplane
    kind: Composition
    listKind: CompositionList
    plural: compositions
    singular: composition
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CompositionSpec specifies the desired state of the definition.
            properties:
              compositeTypeRef:
                description: CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
                properties:
                  apiVersion:
                    description: APIVersion of the type.
                    type: string
                  kind:
                    description: Kind of the type.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
              resources:
                description: Resources is the list of resource templates that will be used when a composite resource referring to this composition is created.
                items:
                  description: ComposedTemplate is used to provide information about how the composed resource should be processed.
                  properties:
                    base:
                      description: Base is the target resource that the patches will be applied on.
                      type: object
                      x-kubernetes-embedded-resource: true
                      x-kubernetes-preserve-unknown-fields: true
                    connectionDetails:
                      description: ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
                      items:
                        description: ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
                        properties:
                          fromConnectionSecretKey:
                            description: FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
                            type: string
                          name:
                            description: Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
                            type: string
                          value:
                            description: Value that will be propagated to the connection secret of the composition instance. Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.
                            type: string
                        type: object
                      type: array
                    patches:
                      description: Patches will be applied as overlay to the base resource.
                      items:
                        description: Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
                        properties:
                          fromFieldPath:
                            description: FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
                            type: string
                          toFieldPath:
                            description: ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
                            type: string
                          transforms:
                            description: Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
                            items:
                              description: Transform is a unit of process whose input is transformed into an output with the supplied configuration.
                              properties:
                                map:
                                  additionalProperties:
                                    type: string
                                  description: Map uses the input as a key in the given map and returns the value.
                                  type: object
                                math:
                                  description: Math is used to transform the input via mathematical operations such as multiplication.
                                  properties:
                                    multiply:
                                      description: Multiply the value.
                                      format: int64
                                      type: integer
                                  type: object
                                string:
                                  description: String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
                                  properties:
                                    fmt:
                                      description: Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
                                      type: string
                                  required:
                                  - fmt
                                  type: object
                                type:
                                  description: Type of the transform to be run.
                                  type: string
                              required:
                              - type
                              type: object
                            type: array
                        required:
                        - fromFieldPath
                        type: object
                      type: array
                    readinessChecks:
                      description: ReadinessChecks allows users to define custom readiness checks. All checks have to return true in order for resource to be considered ready. The default readiness check is to have the "Ready" condition to be "True".
                      items:
                        description: ReadinessCheck is used to indicate how to tell whether a resource is ready for consumption
                        properties:
                          fieldPath:
                            description: FieldPath shows the path of the field whose value will be used.
                            type: string
                          matchInteger:
                            description: MatchInt is the value you'd like to match if you're using "MatchInt" type.
                            format: int64
                            type: integer
                          matchString:
                            description: MatchString is the value you'd like to match if you're using "MatchString" type.
                            type: string
                          type:
                            description: Type indicates the type of probe you'd like to use.
                            enum:
                            - MatchString
                            - MatchInteger
                            - NonEmpty
                            - None
                            type: string
                        required:
                        - type
                        type: object
                      type: array
                  required:
                  - base
                  type: object
                type: array
              writeConnectionSecretsToNamespace:
                description: WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
                type: string
            required:
            - compositeTypeRef
            - resources
            type: object
          status:
            description: CompositionStatus shows the observed state of the composition.
            properties:
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Composition defines the group of resources to be created when a compatible type is created with reference to the composition.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CompositionSpec specifies the desired state of the definition.
            properties:
              compositeTypeRef:
                description: CompositeTypeRef specifies the type of composite resource that this composition is compatible with.
                properties:
                  apiVersion:
                    description: APIVersion of the type.
                    type: string
                  kind:
                    description: Kind of the type.
                    type: string
                required:
                - apiVersion
                - kind
                type: object
              resources:
                description: Resources is the list of resource templates that will be used when a composite resource referring to this composition is created.
                items:
                  description: ComposedTemplate is used to provide information about how the composed resource should be processed.
                  properties:
                    base:
                      description: Base is the target resource that the patches will be applied on.
                      type: object
                      x-kubernetes-embedded-resource: true
                      x-kubernetes-preserve-unknown-fields: true
                    connectionDetails:
                      description: ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
                      items:
                        description: ConnectionDetail includes the information about the propagation of the connection information from one secret to another.
                        properties:
                          fromConnectionSecretKey:
                            description: FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
                            type: string
                          name:
                            description: Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
                            type: string
                          value:
                            description: Value that will be propagated to the connection secret of the composition instance. Typically you should use FromConnectionSecretKey instead, but an explicit value may be set to inject a fixed, non-sensitive connection secret values, for example a well-known port. Supercedes FromConnectionSecretKey when set.
                            type: string
                        type: object
                      type: array
                    patches:
                      description: Patches will be applied as overlay to the base resource.
                      items:
                        description: Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.
                        properties:
                          fromFieldPath:
                            description: FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
                            type: string
                          toFieldPath:
                            description: ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
                            type: string
                          transforms:
                            description: Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
                            items:
                              description: Transform is a unit of process whose input is transformed into an output with the supplied configuration.
                              properties:
                                map:
                                  additionalProperties:
                                    type: string
                                  description: Map uses the input as a key in the given map and returns the value.
                                  type: object
                                math:
                                  description: Math is used to transform the input via mathematical operations such as multiplication.
                                  properties:
                                    multiply:
                                      description: Multiply the value.
                                      format: int64
                                      type: integer
                                  type: object
                                string:
                                  description: String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.
                                  properties:
                                    fmt:
                                      description: Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
                                      type: string
                                  required:
                                  - fmt
                                  type: object
                                type:
                                  description: Type of the transform to be run.
                                  type: string
                              required:
                              - type
                              type: object
                            type: array
                        required:
                        - fromFieldPath
                        type: object
                      type: array
                    readinessChecks:
                      description: ReadinessChecks allows users to define custom readiness checks. All checks have to return true in order for resource to be considered ready. The default readiness check is to have the "Ready" condition to be "True".
                      items:
                        description: ReadinessCheck is used to indicate how to tell whether a resource is ready for consumption
                        properties:
                          fieldPath:
                            description: FieldPath shows the path of the field whose value will be used.
                            type: string
                          matchInteger:
                            description: MatchInt is the value you'd like to match if you're using "MatchInt" type.
                            format: int64
                            type: integer
                          matchString:
                            description: MatchString is the value you'd like to match if you're using "MatchString" type.
                            type: string
                          type:
                            description: Type indicates the type of probe you'd like to use.
                            enum:
                            - MatchString
                            - MatchInteger
                            - NonEmpty
                            - None
                            type: string
                        required:
                        - type
                        type: object
                      type: array
                  required:
                  - base
                  type: object
                type: array
              writeConnectionSecretsToNamespace:
                description: WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
                type: string
            required:
            - compositeTypeRef
            - resources
            type: object
          status:
            description: CompositionStatus shows the observed state of the composition.
            properties:
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True, False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
