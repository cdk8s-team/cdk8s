import { Construct, IConstruct, Node } from 'constructs';
import { Chart } from './chart';
import { sanitizeValue } from './_util';
import { resolve } from './_tokens';
import * as stringify from 'json-stable-stringify';
import { ApiObjectMetadata, ApiObjectMetadataDefinition } from './metadata';

/**
 * Options for defining API objects.
 */
export interface ApiObjectOptions {
  /**
   * Object metadata.
   *
   * If `name` is not specified, an app-unique name will be allocated by the
   * framework based on the path of the construct within thes construct tree.
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * API version.
   */
  readonly apiVersion: string;

  /**
   * Resource kind.
   */
  readonly kind: string;

  /**
   * Additional attributes for this API object.
   */
  readonly [key: string]: any;
}

export class ApiObject extends Construct {
  /**
   * The name of the API object.
   *
   * If a name is specified in `metadata.name` this will be the name returned.
   * Otherwise, a name will be generated by calling
   * `Chart.of(this).generatedObjectName(this)`, which by default uses the
   * construct path to generate a DNS-compatible name for the resource.
   */
  public readonly name: string;

  /**
   * The object's API version.
   */
  public readonly apiVersion: string;

  /**
   * The object kind.
   */
  public readonly kind: string;

  /**
   * The chart in which this object is defined.
   */
  public readonly chart: Chart;

  /**
   * Metadata associated with this API object.
   */
  public readonly metadata: ApiObjectMetadataDefinition;

  /**
   * Defines an API object.
   *
   * @param scope the construct scope
   * @param ns namespace
   * @param options options
   */
  constructor(scope: Construct, ns: string, private readonly options: ApiObjectOptions) {
    super(scope, ns);
    this.chart = Chart.of(this);
    this.kind = options.kind;
    this.apiVersion = options.apiVersion;

    this.name = options.metadata?.name ?? this.chart.generateObjectName(this);

    this.metadata = new ApiObjectMetadataDefinition({
      name: this.name,
      namespace: options.metadata?.namespace ?? this.chart.namespace,

      // override user defined values
      ...options.metadata,
    });
  }

  /**
   * Create a dependency between this ApiObject and other constructs.
   * These can be other ApiObjects, Charts, or custom.
   *
   * @param dependencies the dependencies to add.
   */
  public addDependency(...dependencies: IConstruct[]) {
    Node.of(this).addDependency(...dependencies);
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const data = {
      ...this.options,
      metadata: this.metadata.toJson(),
    };

    // convert to "pure data" so, for example, when we convert to yaml these
    // references are not converted to anchors.
    return JSON.parse(stringify(sanitizeValue(resolve(this, data))));
  }
}
