// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Placeholder Empty 1`] = `
Array [
  Object {
    "apiVersion": "elasticsearch.k8s.elastic.co/v1",
    "kind": "Elasticsearch",
    "metadata": Object {
      "name": "test-chart-elasticsearch-c819bb71",
    },
    "spec": Object {
      "http": Object {
        "service": Object {
          "spec": Object {
            "ports": Array [
              Object {
                "port": 9200,
              },
            ],
          },
        },
        "tls": Object {
          "selfSignedCertificate": Object {
            "disabled": true,
          },
        },
      },
      "nodeSets": Array [
        Object {
          "config": Object {
            "node.data": true,
            "node.ingest": true,
            "node.master": true,
            "node.store.allow_mmap": false,
            "xpack.security.enabled": true,
            "xpack.security.http.ssl.enabled": false,
          },
          "count": 1,
          "name": "default",
        },
      ],
      "version": "7.7.1",
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "name": "test-chart-deployment-c8cfd183",
    },
    "spec": Object {
      "replicas": 1,
      "selector": Object {
        "matchLabels": Object {
          "cdk8s.deployment": "test-chart-Deployment-c8550d6d",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "cdk8s.deployment": "test-chart-Deployment-c8550d6d",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "command": Array [
                "node",
                "query.js",
                "8000",
              ],
              "env": Array [
                Object {
                  "name": "ELASTIC_USERNAME",
                  "value": "elastic",
                },
                Object {
                  "name": "ELASTIC_ENDPOINT",
                  "value": "http://test-chart-elasticsearch-c819bb71-es-http:9200",
                },
                Object {
                  "name": "ELASTIC_PASSWORD",
                  "valueFrom": Object {
                    "secretKeyRef": Object {
                      "key": "elastic",
                      "name": "test-chart-elasticsearch-c819bb71-es-elastic-user",
                    },
                  },
                },
              ],
              "image": "node:12.18.0-stretch",
              "imagePullPolicy": "Always",
              "name": "main",
              "ports": Array [
                Object {
                  "containerPort": 8000,
                },
              ],
              "volumeMounts": Array [
                Object {
                  "mountPath": "/root",
                  "name": "configmap-test-chart-config-c873bd48",
                },
              ],
              "workingDir": "/root",
            },
          ],
          "volumes": Array [
            Object {
              "configMap": Object {
                "name": "test-chart-config-c873bd48",
              },
              "name": "configmap-test-chart-config-c873bd48",
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "name": "test-chart-deployment-service-c835a1d2",
    },
    "spec": Object {
      "externalIPs": Array [],
      "ports": Array [
        Object {
          "port": 9000,
          "targetPort": 8000,
        },
      ],
      "selector": Object {
        "cdk8s.deployment": "test-chart-Deployment-c8550d6d",
      },
      "type": "ClusterIP",
    },
  },
  Object {
    "apiVersion": "v1",
    "data": Object {
      "query.js": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
const http = require(\\"http\\");
const querystring = require(\\"querystring\\");
const endpoint = process.env.ELASTIC_ENDPOINT;
const username = process.env.ELASTIC_USERNAME;
const password = process.env.ELASTIC_PASSWORD;
if (!endpoint) {
    throw new Error('ELASTIC_ENDPOINT env variable is required');
}
if (!password) {
    throw new Error('ELASTIC_PASSWORD env variable is required');
}
if (!username) {
    throw new Error('ELASTIC_USERNAME env variable is required');
}
var port = process.argv[2];
console.log('Creating a server...');
http.createServer(function (req, res) {
    var _a;
    function sendResponse(data) {
        res.write(data);
        res.end();
    }
    try {
        console.log(\`Received request: \${req.url}\`);
        let uri = (_a = req.url) === null || _a === void 0 ? void 0 : _a.split('?')[1];
        if (!uri) {
            throw new Error('URI is undefined');
        }
        doSearch(uri, sendResponse);
    }
    catch (err) {
        sendResponse(err.message);
    }
}).listen(port);
function doSearch(uri, callback) {
    console.log(\`URI is: \${uri}\`);
    const queryParams = querystring.parse(uri);
    if (!queryParams) {
        throw new Error('Illegal Query. Use ?search=<free-text>');
    }
    console.log(\`Params: \${JSON.stringify(queryParams)}\`);
    const search = queryParams['search'];
    const hostAndPort = endpoint.split('//')[1].split(':');
    const options = {
        headers: {
            'Authorization': 'Basic ' + Buffer.from(username + ':' + password).toString('base64'),
        },
        path: \`/_search?q=\${search}\`,
        port: hostAndPort[1],
        host: hostAndPort[0]
    };
    console.log(\`Sending search query to elasticsearch: \${JSON.stringify(options)}\`);
    http.get(options, (esResponse) => {
        let data = '';
        esResponse.on('data', (chunk) => {
            data += chunk;
        });
        esResponse.on('end', () => {
            callback(data);
        });
    }).on('error', (err) => {
        callback(err.message);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJxdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QiwyQ0FBMkM7QUFHM0MsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztBQUM5QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDO0FBQzlDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7QUFFOUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtJQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztDQUM5RDtBQUVELElBQUksQ0FBQyxRQUFRLEVBQUU7SUFDYixNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7Q0FDOUQ7QUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFO0lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0NBQzlEO0FBRUQsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUzQixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQXlCLEVBQUUsR0FBd0I7O0lBRTdFLFNBQVMsWUFBWSxDQUFDLElBQVk7UUFDaEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsSUFBSTtRQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTVDLElBQUksR0FBRyxHQUFHLE1BQUEsR0FBRyxDQUFDLEdBQUcsMENBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUc3QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osWUFBWSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMzQjtBQUVILENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUVoQixTQUFTLFFBQVEsQ0FBQyxHQUFXLEVBQUUsUUFBZ0M7SUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFOUIsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFJLENBQUMsQ0FBQztJQUU1QyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV0RCxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFckMsTUFBTSxXQUFXLEdBQUcsUUFBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEQsTUFBTSxPQUFPLEdBQXNCO1FBQ2pDLE9BQU8sRUFBRTtZQUNQLGVBQWUsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7U0FDdEY7UUFDRCxJQUFJLEVBQUUsY0FBYyxNQUFNLEVBQUU7UUFDNUIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7S0FDckIsQ0FBQTtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWpGLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBZSxFQUFFLEVBQUU7UUFFcEMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWQsVUFBVSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNuQyxJQUFJLElBQUksS0FBSyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1lBQ3hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFVLEVBQUUsRUFBRTtRQUM1QixRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgKiBhcyBxdWVyeXN0cmluZyBmcm9tICdxdWVyeXN0cmluZyc7XG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0QXJncyB9IGZyb20gJ2h0dHAnO1xuXG5jb25zdCBlbmRwb2ludCA9IHByb2Nlc3MuZW52LkVMQVNUSUNfRU5EUE9JTlQ7XG5jb25zdCB1c2VybmFtZSA9IHByb2Nlc3MuZW52LkVMQVNUSUNfVVNFUk5BTUU7XG5jb25zdCBwYXNzd29yZCA9IHByb2Nlc3MuZW52LkVMQVNUSUNfUEFTU1dPUkQ7XG5cbmlmICghZW5kcG9pbnQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdFTEFTVElDX0VORFBPSU5UIGVudiB2YXJpYWJsZSBpcyByZXF1aXJlZCcpO1xufVxuXG5pZiAoIXBhc3N3b3JkKSB7XG4gIHRocm93IG5ldyBFcnJvcignRUxBU1RJQ19QQVNTV09SRCBlbnYgdmFyaWFibGUgaXMgcmVxdWlyZWQnKTtcbn1cblxuaWYgKCF1c2VybmFtZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0VMQVNUSUNfVVNFUk5BTUUgZW52IHZhcmlhYmxlIGlzIHJlcXVpcmVkJyk7XG59XG5cbnZhciBwb3J0ID0gcHJvY2Vzcy5hcmd2WzJdO1xuXG5jb25zb2xlLmxvZygnQ3JlYXRpbmcgYSBzZXJ2ZXIuLi4nKTtcbmh0dHAuY3JlYXRlU2VydmVyKGZ1bmN0aW9uIChyZXE6IGh0dHAuSW5jb21pbmdNZXNzYWdlLCByZXM6IGh0dHAuU2VydmVyUmVzcG9uc2UpIHtcblxuICBmdW5jdGlvbiBzZW5kUmVzcG9uc2UoZGF0YTogc3RyaW5nKSB7XG4gICAgcmVzLndyaXRlKGRhdGEpO1xuICAgIHJlcy5lbmQoKTtcbiAgfVxuXG4gIHRyeSB7XG5cbiAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgcmVxdWVzdDogJHtyZXEudXJsfWApO1xuXG4gICAgbGV0IHVyaSA9IHJlcS51cmw/LnNwbGl0KCc/JylbMV07XG5cbiAgICBpZiAoIXVyaSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVUkkgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgZG9TZWFyY2godXJpLCBzZW5kUmVzcG9uc2UpO1xuXG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgc2VuZFJlc3BvbnNlKGVyci5tZXNzYWdlKTtcbiAgfVxuXG59KS5saXN0ZW4ocG9ydCk7XG5cbmZ1bmN0aW9uIGRvU2VhcmNoKHVyaTogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IHN0cmluZykgPT4gdm9pZCkge1xuXG4gIGNvbnNvbGUubG9nKGBVUkkgaXM6ICR7dXJpfWApO1xuXG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcXVlcnlzdHJpbmcucGFyc2UodXJpISk7XG5cbiAgaWYgKCFxdWVyeVBhcmFtcykge1xuICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBRdWVyeS4gVXNlID9zZWFyY2g9PGZyZWUtdGV4dD4nKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKGBQYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkocXVlcnlQYXJhbXMpfWApO1xuXG4gIGNvbnN0IHNlYXJjaCA9IHF1ZXJ5UGFyYW1zWydzZWFyY2gnXTtcblxuICBjb25zdCBob3N0QW5kUG9ydCA9IGVuZHBvaW50IS5zcGxpdCgnLy8nKVsxXS5zcGxpdCgnOicpO1xuXG4gIGNvbnN0IG9wdGlvbnM6IENsaWVudFJlcXVlc3RBcmdzID0ge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICdBdXRob3JpemF0aW9uJzogJ0Jhc2ljICcgKyBCdWZmZXIuZnJvbSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0JyksXG4gICAgfSxcbiAgICBwYXRoOiBgL19zZWFyY2g/cT0ke3NlYXJjaH1gLFxuICAgIHBvcnQ6IGhvc3RBbmRQb3J0WzFdLFxuICAgIGhvc3Q6IGhvc3RBbmRQb3J0WzBdXG4gIH1cblxuICBjb25zb2xlLmxvZyhgU2VuZGluZyBzZWFyY2ggcXVlcnkgdG8gZWxhc3RpY3NlYXJjaDogJHtKU09OLnN0cmluZ2lmeShvcHRpb25zKX1gKTtcblxuICBodHRwLmdldChvcHRpb25zLCAoZXNSZXNwb25zZTogYW55KSA9PiB7XG5cbiAgICBsZXQgZGF0YSA9ICcnO1xuXG4gICAgZXNSZXNwb25zZS5vbignZGF0YScsIChjaHVuazogYW55KSA9PiB7XG4gICAgICBkYXRhICs9IGNodW5rO1xuICAgIH0pO1xuXG4gICAgZXNSZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgfSk7XG5cbiAgfSkub24oJ2Vycm9yJywgKGVycjogRXJyb3IpID0+IHtcbiAgICBjYWxsYmFjayhlcnIubWVzc2FnZSk7XG4gIH0pO1xuXG59Il19",
    },
    "kind": "ConfigMap",
    "metadata": Object {
      "name": "test-chart-config-c873bd48",
    },
  },
]
`;
